generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique @db.VarChar(50)
  username   String   @unique @db.VarChar(50)
  password   String   @db.VarChar(100)
  role       Role
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  posts      Post[]

  @@map("users")
}

model Post {
  id                Int                 @id @default(autoincrement())
  title             String              @db.VarChar(255)
  content           String
  published         Boolean             @default(false)
  userId            Int
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  CategoriesToPosts CategoriesToPosts[]
  comments          Comment[]
  User              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories        Category[]          @relation("CategoryToPost")

  @@map("posts")
}

model CategoriesToPosts {
  postId     Int
  categoryId Int
  created_at DateTime @default(now()) @db.Timestamp(6)
  category   Category @relation(fields: [categoryId], references: [id])
  post       Post     @relation(fields: [postId], references: [id])

  @@id([postId, categoryId])
}

model Category {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(20)
  CategoriesToPosts CategoriesToPosts[]
  posts             Post[]              @relation("CategoryToPost")

  @@map("categories")
}

model Comment {
  id         Int      @id @default(autoincrement())
  content    String
  postId     Int?
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  Post       Post?    @relation(fields: [postId], references: [id])

  @@map("comments")
}

enum Role {
  superuser
  admin
  reader
  editor
  tester
}
